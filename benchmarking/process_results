#!/usr/bin/env ruby

require "trollop"
require "aarons_gnuplot"

$LOAD_PATH << Pathname.new(__FILE__).parent.join("lib")

require 'flann_experiment'

require "plots/per_algorithm_by_axis_bias"


opts = Trollop::options do
  opt :verbose, "Be verbose", default: true
end

results = ARGV.map { |file| LoadedResults.from_file file }

results = results.reduce( LoadedResults.new ) { |m,v| m += v }

results.print
results.print_latex

def plot_path( *plot_name )
  plot_dir = Pathname.new( "plots" )
  FileUtils.mkdir plot_dir unless Dir.exist? plot_dir

  plot_name = plot_dir.join( *plot_name )
  FileUtils.mkdir_p plot_name.parent unless Dir.exist? plot_name.parent

  plot_name.to_s
end

include Gnuplot
Plot::format = "postscript"
$VERBOSE = true

#
# For each image pair, for each homography
# Plot one line per algorithm, X is weight, Y is 
#
results.partition_by_pair.each_pair { |pair,presults|
  presults.partition_by_homography.each_pair { |hom, phresults|

    weights = phresults.map { |result|
      result.algo.opts[:weight]
    }.compact.uniq

    wmin = weights.min
    wmax = weights.max
    

    Gnuplot::do_plot( plot_path( pair, hom, "per_algorithm_by_weight" ) ) { |plot|
      phresults.partition_by_algorithm.each_pair { |algo, pharesults|
        data = case pharesults.length
               when 1
                 result = pharesults.first
                 [ [ wmin, result.frac_inliers ],
                   [ wmax, result.frac_inliers ] ]
               else
                 pharesults.map { |res|[ res.algo.opts[:weight], res.frac_inliers ] }
               end

        plot.data << Plot::DataSet.new( data.transpose ) do |ds|
          ds.with = "lines"
          ds.using = "1:2"
          ds.title = algo
        end
      }


      plot.title "Fraction of inliers as function of weight on prior geometry for image pair %s with homography %s" % [pair, hom]
      plot.xlabel "k^2 weight"
      plot.ylabel "Frac. inliers"
      plot.set "logscale", "x"
    }
  }
}

#
# For each image pair
# Plot one line per algorithm, X is roll_bias, Y is  pct_inliers
#

results.partition_by_pair.each_pair { |pair,presults|
  per_algorithm_by_axis_bias( pair, presults, :roll_bias )
  per_algorithm_by_axis_bias( pair, presults, :pitch_bias )
}





