#!/usr/bin/env ruby

$LOAD_PATH << Pathname.new(__FILE__).parent.join("lib")

require 'flann_experiment'
require 'homography'
require 'photoscan'

def motueka_one( file )
  Pathname.new( "~/workspace/aerial_data_sets/motueka_quarter_scale/one" ).join(file).expand_path
end
def motueka_three( file )
  Pathname.new( "~/workspace/aerial_data_sets/motueka_quarter_scale/three" ).join(file).expand_path
end
def motueka_four( file )
  Pathname.new( "~/workspace/aerial_data_sets/motueka_quarter_scale/four" ).join(file).expand_path
end

exp = FlannExperiment.from_opts { |exp|
  exp.feature_library.do_normalize = false

  four_cams = Photoscan::CameraFile.load( motueka_four("cameras.xml") )
  cam_7622 = four_cams.find("IMG_7622.jpg")
  cam_7621 = four_cams.find("IMG_7621.jpg")

  img_7622 = InputImage.new( motueka_four( "IMG_7622.jpg" ) )
  img_7621 = InputImage.new( motueka_four( "IMG_7621.jpg" ) )
  a = exp.image_pairs.add img_7622, img_7622,
    h: [[1,0,0], [0,1,0], [0,0,1] ] 

  exp.image_pairs.add img_7622, img_7622,
    h: SuppliedHomography.new( "perturbed",
                              [[1,0,10.0], [0,1,0], [0,0,1] ] , a.homography )

  #[-10, -8, -6, -4, -2, 2, 4, 6, 8, 10].each { |b|
  [-10, -6, -4, -2, -1, 1, 2, 4, 6, 10].each { |b|
    bias = b * 4e-2
#    exp.image_pairs.clone( a,
#                          h: PerturbedHomography.new( "roll_bias=#{bias}", a.homography,
#                                                     cam_7622, cam_7621,
#                                                     roll_bias: bias ) )
#    exp.image_pairs.clone( a,
#                          h: PerturbedHomography.new( "pitch_bias=#{bias}", a.homography,
#                                                     cam_7622, cam_7621,
#                                                       pitch_bias: bias ) )
#    exp.image_pairs.clone( a,
#                          h: PerturbedHomography.new( "yaw_bias=#{bias}", a.homography,
#                                                     cam_7622, cam_7621,
#                                                     yaw_bias: bias ) )
  }


  ratio = 1.4

  exp.algorithms << (exp.reference = BruteForceMatcher.new)
  exp.algorithms << BruteForceRatioMatcher.new( ratio )
  #  exp.algorithms << L2SqrBruteForceMatcher.new
  #  exp.algorithms << CVFFIBruteForceMatcher.new
  #  exp.algorithms << CVFFIFlannMatcher.new
  
  #exp.algorithms << KdTreeFlannMatcher.new
  #exp.algorithms << KdTreeFlannRatioMatcher.new(  ratio )
  #exp.algorithms << KMeansFlannMatcher.new
  #exp.algorithms << KMeansFlannRatioMatcher.new(  ratio )

  # The geometry-based matchers
  exp.algorithms << ManualGeometry.new
  exp.algorithms << ManualGeometryRatio.new( ratio )

  #[1e-4, 1e-2, 1, 1e2, 1e4, 1e6, 1e8, 1e10].each { |weight|
  [ 1, 1e2, 1e4, 1e6].each { |weight|
    exp.algorithms << ExtendedBruteForceMatcher.new( weight )
    #    exp.algorithms << ExtendedCVFFIFlannMatcher.new( weight )
    exp.algorithms << ExtendedKdTreeFlannMatcher.new( weight )
    exp.algorithms << ExtendedKdTreeFlannRatioMatcher.new( weight, ratio )
  }

}

  exp.dump
  results = exp.run

working = Pathname.new(__FILE__).parent.expand_path.join("self_test_results")
FileUtils.mkdir working unless Dir.exist? working
filename = working.join( 'results-' + Time.new.strftime("%j%H%M") + '.json' )
results.save( filename )

loaded_results = LoadedResults.from_file filename 
loaded_results.print
